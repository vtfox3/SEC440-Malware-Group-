```python
import cryptography

# generating keys
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
)
public_key = private_key.public_key()

# storing private key

from cryptography.hazmat.primitives import serialization
pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
)

with open('private_key.pem', 'wb') as f:
        f.write(pem)

# storing private key

from cryptography.hazmat.primitives import serialization

pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo,
)

with open('public_key.pem', 'wb') as f:
        f.write(pem)

#---
# reading private key
#from cryptography.hazmat.backends import default_backend
#from cryptography.hazmat.primitives import serializtion

with open('private_key.pem', 'rb') as key_file:
        private_key = serialization.load_pem_private_key(
                key_file.read(),
                password=None,
                backend=default_backend()
)

# reading public key

with open('public_key.pem', 'rb') as key_file:
        public_key = serialization.load_pem_public_key(
                key_file.read(),
                backend=default_backend()
)


#---

#encryption
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

f = open('secret.txt', 'rb')
message = f.read()
f.close()
encrypted = public_key.encrypt(
        message,
        padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
        )
    )


#decryption
original_message = private_key.decrypt(
        encrypted,
        padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
        )
)

m_encrypted = encrypted
f = open('secret.encrypted', 'w')
f.write(m_encrypted)
f.close()
```
